
pool:
  vmImage: 'Ubuntu 16.04'

pr:
- master      

steps:

- task: TerraformInstaller@0
  inputs:
    terraformVersion: '0.12.0'
  condition: always()

# - task: GoTool@0
#   inputs:
#     version: '1.12.6'
#   displayName: 'Set up the Go workspace'

# - script: |
#     ./scripts/install_ci.sh
#   displayName: 'Set up Golang CI Tools'

# - script: |
#     ./scripts/test.sh
#   displayName: 'Run Tests'

# - script: |
#     make build
#   displayName: 'Make build'    

# - task: PublishTestResults@2
#   inputs:
#     testRunner: JUnit
#     testResultsFiles: $(System.DefaultWorkingDirectory)/junit-report/*.xml

# - task: PublishCodeCoverageResults@1
#   inputs:
#     codeCoverageTool: Cobertura 
#     summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage.xml

- task: TerraformTaskV1@0
  displayName: 'terraform init'
  inputs:
    provider: 'aws'
    command: 'init'
    workingDirectory: './modules'
    backendServiceAWS: 'AWS_Terraform_Connection'
    backendAWSBucketName: '$(BACKEND_AWS_BUCKET_NAME)'
    backendAWSKey: 'pr-$(System.PullRequest.PullRequestNumber)/terraform.tfstate'

- task: TerraformTaskV1@0
  displayName: 'terraform apply'
  inputs:
    provider: 'aws'
    command: 'apply'
    workingDirectory: './modules'
    commandOptions: '-var="namespace=pr-$(System.PullRequest.PullRequestNumber)" -var="budget_notification_from_email=$(NOTIFY_EMAIL)"'
    environmentServiceNameAWS: 'AWS_Terraform_Connection'

- task: TerraformTaskV1@0
  displayName: 'terraform destroy'
  inputs:
    provider: 'aws'
    command: 'destroy'
    workingDirectory: './modules'
    commandOptions: '-var="namespace=pr-$(System.PullRequest.PullRequestNumber)" -var="budget_notification_from_email=$(NOTIFY_EMAIL)"'

# Publish a Github Release for tagged commits
# See https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/github-release?view=azure-devops
- task: GithubRelease@0
  displayName: 'Create GitHub Release'
  inputs:
    gitHubConnection: Github
    repositoryName: Optum/Redbox
    assets: |
      $(Build.SourcesDirectory)/bin/build_artifacts.zip
      $(Build.SourcesDirectory)/bin/terraform_artifacts.zip
      $(Build.SourcesDirectory)/scripts/deploy.sh
      $(Build.SourcesDirectory)/scripts/restore_db.sh
