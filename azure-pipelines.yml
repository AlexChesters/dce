
pool:
  vmImage: 'Ubuntu 16.04'

pr:
- master      

steps:

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true
    architecture: 'x64'

- task: CmdLine@2
  inputs:
    script: 'pip install awscli'
  displayName: 'Install awscli' 

- task: AWSCLI@1
  inputs:
    awsCredentials: 'AWS_Login'
    regionName: 'us-east-1'
    awsCommand: 's3'
    awsSubCommand: 'ls'
  condition: always()
  displayName: 'AWS login'

- script: |
    aws configure list
  displayName: 'aws configure list'

- task: TerraformInstaller@0
  inputs:
    terraformVersion: '0.12.0'
  condition: always()
  displayName: 'Install Terraform' 

# - task: GoTool@0
#   inputs:
#     version: '1.12.6'
#   displayName: 'Set up the Go workspace'

# - script: |
#     ./scripts/install_ci.sh
#   displayName: 'Set up Golang CI Tools'

# - script: |
#     ./scripts/test.sh
#   displayName: 'Run Tests'

- script: |
    make build
  displayName: 'Make build'    

# - task: PublishTestResults@2
#   inputs:
#     testRunner: JUnit
#     testResultsFiles: $(System.DefaultWorkingDirectory)/junit-report/*.xml

# - task: PublishCodeCoverageResults@1
#   inputs:
#     codeCoverageTool: Cobertura 
#     summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage.xml

- task: TerraformTaskV1@0
  displayName: 'terraform init'
  inputs:
    provider: 'aws'
    command: 'init'
    workingDirectory: './modules'
    backendServiceAWS: 'AWS_Terraform_Connection'
    backendAWSBucketName: '$(BACKEND_AWS_BUCKET_NAME)'
    backendAWSKey: 'pr-$(System.PullRequest.PullRequestNumber)/terraform.tfstate'

- task: TerraformTaskV1@0
  displayName: 'terraform apply'
  inputs:
    provider: 'aws'
    command: 'apply'
    workingDirectory: './modules'
    commandOptions: '-var="namespace=pr-$(System.PullRequest.PullRequestNumber)" -var="budget_notification_from_email=$(NOTIFY_EMAIL)"'
    environmentServiceNameAWS: 'AWS_Terraform_Connection'

- script: |
    ./scripts/deploy.sh \
        ./bin/build_artifacts.zip \
        'pr-$(System.PullRequest.PullRequestNumber)' \
        '$(ARTIFACTS_BUCKET_NAME)-pr-$(System.PullRequest.PullRequestNumber)'
  displayName: 'Deploy artifacts'

- script: |
    make test_functional
  displayName: 'Run functional tests'

- task: TerraformTaskV1@0
  displayName: 'terraform destroy'
  inputs:
    provider: 'aws'
    command: 'destroy'
    workingDirectory: './modules'
    commandOptions: '-var="namespace=pr-$(System.PullRequest.PullRequestNumber)" -var="budget_notification_from_email=$(NOTIFY_EMAIL)"'
    environmentServiceNameAWS: 'AWS_Terraform_Connection'