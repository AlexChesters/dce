// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import authorization "github.com/Optum/Redbox/pkg/authorization"
import autorest "github.com/Azure/go-autorest/autorest"
import context "context"
import mock "github.com/stretchr/testify/mock"

// Authorizationer is an autogenerated mock type for the Authorizationer type
type Authorizationer struct {
	mock.Mock
}

// ADGroupMember provides a mock function with given fields: ctx, groupID, memberID, tenantID
func (_m *Authorizationer) ADGroupMember(ctx context.Context, groupID *string, memberID *string, tenantID *string) (bool, error) {
	ret := _m.Called(ctx, groupID, memberID, tenantID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *string, *string, *string) bool); ok {
		r0 = rf(ctx, groupID, memberID, tenantID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *string, *string, *string) error); ok {
		r1 = rf(ctx, groupID, memberID, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddADGroupUser provides a mock function with given fields: ctx, memberID, groupID, tenantID
func (_m *Authorizationer) AddADGroupUser(ctx context.Context, memberID string, groupID string, tenantID string) (autorest.Response, error) {
	ret := _m.Called(ctx, memberID, groupID, tenantID)

	var r0 autorest.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) autorest.Response); ok {
		r0 = rf(ctx, memberID, groupID, tenantID)
	} else {
		r0 = ret.Get(0).(autorest.Response)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, memberID, groupID, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthorizerForResource provides a mock function with given fields: grantType, resource, tenantID
func (_m *Authorizationer) GetAuthorizerForResource(grantType authorization.OAuthGrantType, resource string, tenantID string) (autorest.Authorizer, error) {
	ret := _m.Called(grantType, resource, tenantID)

	var r0 autorest.Authorizer
	if rf, ok := ret.Get(0).(func(authorization.OAuthGrantType, string, string) autorest.Authorizer); ok {
		r0 = rf(grantType, resource, tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(autorest.Authorizer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(authorization.OAuthGrantType, string, string) error); ok {
		r1 = rf(grantType, resource, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGraphAuthorizer provides a mock function with given fields: tenantID
func (_m *Authorizationer) GetGraphAuthorizer(tenantID string) (autorest.Authorizer, error) {
	ret := _m.Called(tenantID)

	var r0 autorest.Authorizer
	if rf, ok := ret.Get(0).(func(string) autorest.Authorizer); ok {
		r0 = rf(tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(autorest.Authorizer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveADGroupUser provides a mock function with given fields: ctx, groupID, memberID, tenantID
func (_m *Authorizationer) RemoveADGroupUser(ctx context.Context, groupID string, memberID string, tenantID string) (autorest.Response, error) {
	ret := _m.Called(ctx, groupID, memberID, tenantID)

	var r0 autorest.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) autorest.Response); ok {
		r0 = rf(ctx, groupID, memberID, tenantID)
	} else {
		r0 = ret.Get(0).(autorest.Response)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, groupID, memberID, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
