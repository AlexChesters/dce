// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import db "github.com/Optum/Redbox/pkg/db"
import mock "github.com/stretchr/testify/mock"

// DBer is an autogenerated mock type for the DBer type
type DBer struct {
	mock.Mock
}

// FindAssignmentByUser provides a mock function with given fields: userID
func (_m *DBer) FindAssignmentByUser(userID string) ([]*db.RedboxAccountAssignment, error) {
	ret := _m.Called(userID)

	var r0 []*db.RedboxAccountAssignment
	if rf, ok := ret.Get(0).(func(string) []*db.RedboxAccountAssignment); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.RedboxAccountAssignment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAssignmentsByAccount provides a mock function with given fields: accountID
func (_m *DBer) FindAssignmentsByAccount(accountID string) ([]*db.RedboxAccountAssignment, error) {
	ret := _m.Called(accountID)

	var r0 []*db.RedboxAccountAssignment
	if rf, ok := ret.Get(0).(func(string) []*db.RedboxAccountAssignment); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.RedboxAccountAssignment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccount provides a mock function with given fields: accountID
func (_m *DBer) GetAccount(accountID string) (*db.RedboxAccount, error) {
	ret := _m.Called(accountID)

	var r0 *db.RedboxAccount
	if rf, ok := ret.Get(0).(func(string) *db.RedboxAccount); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.RedboxAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountsForReset provides a mock function with given fields:
func (_m *DBer) GetAccountsForReset() ([]*db.RedboxAccount, error) {
	ret := _m.Called()

	var r0 []*db.RedboxAccount
	if rf, ok := ret.Get(0).(func() []*db.RedboxAccount); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.RedboxAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReadyAccount provides a mock function with given fields:
func (_m *DBer) GetReadyAccount() (*db.RedboxAccount, error) {
	ret := _m.Called()

	var r0 *db.RedboxAccount
	if rf, ok := ret.Get(0).(func() *db.RedboxAccount); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.RedboxAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccount provides a mock function with given fields: account
func (_m *DBer) PutAccount(account db.RedboxAccount) error {
	ret := _m.Called(account)

	var r0 error
	if rf, ok := ret.Get(0).(func(db.RedboxAccount) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutAccountAssignment provides a mock function with given fields: account
func (_m *DBer) PutAccountAssignment(account db.RedboxAccountAssignment) error {
	ret := _m.Called(account)

	var r0 error
	if rf, ok := ret.Get(0).(func(db.RedboxAccountAssignment) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransitionAccountStatus provides a mock function with given fields: accountID, prevStatus, nextStatus
func (_m *DBer) TransitionAccountStatus(accountID string, prevStatus db.AccountStatus, nextStatus db.AccountStatus) (*db.RedboxAccount, error) {
	ret := _m.Called(accountID, prevStatus, nextStatus)

	var r0 *db.RedboxAccount
	if rf, ok := ret.Get(0).(func(string, db.AccountStatus, db.AccountStatus) *db.RedboxAccount); ok {
		r0 = rf(accountID, prevStatus, nextStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.RedboxAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, db.AccountStatus, db.AccountStatus) error); ok {
		r1 = rf(accountID, prevStatus, nextStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransitionAssignmentStatus provides a mock function with given fields: accountID, userID, prevStatus, nextStatus
func (_m *DBer) TransitionAssignmentStatus(accountID string, userID string, prevStatus db.AssignmentStatus, nextStatus db.AssignmentStatus) (*db.RedboxAccountAssignment, error) {
	ret := _m.Called(accountID, userID, prevStatus, nextStatus)

	var r0 *db.RedboxAccountAssignment
	if rf, ok := ret.Get(0).(func(string, string, db.AssignmentStatus, db.AssignmentStatus) *db.RedboxAccountAssignment); ok {
		r0 = rf(accountID, userID, prevStatus, nextStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.RedboxAccountAssignment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, db.AssignmentStatus, db.AssignmentStatus) error); ok {
		r1 = rf(accountID, userID, prevStatus, nextStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
